üß© CIRCULAR QUEUE USING LINKED LIST (THEORY + CODE)


üîπ Concept Recap

    A Circular Queue using Linked List is a queue where
    the last node points back to the first node, forming a circle.

    It still follows the FIFO principle (First In, First Out).



‚öôÔ∏è Key Points
Property          |                   	Description
------------------|--------------------------------------------
Front	          |   Points to the first node (for dequeue)
Rear	          |   Points to the last node (for enqueue)
Rear.next	      |   Points back to front (circular connection)
No overflow	      |   Because linked list grows dynamically
Empty condition	  |   When front == null
One element	      |   When front == rear



üß† Algorithm

1Ô∏è‚É£ Enqueue (Insert Element)
    - Create a new node with given data.
    - If the queue is empty ‚Üí both front and rear point to this new node, and rear.next = front.
    - Otherwise ‚Üí link rear.next = newNode, then update rear = newNode, and make rear.next = front again.

2Ô∏è‚É£ Dequeue (Remove Element)
    - If queue is empty ‚Üí print ‚ÄúQueue Underflow‚Äù.
    - If there is only one element ‚Üí set front = rear = null.
    - Else ‚Üí move front to front.next, and update rear.next = front.

3Ô∏è‚É£ Peek
    - Return front.data if queue isn‚Äôt empty.

4Ô∏è‚É£ Display
    - Start from front and traverse until you reach rear again (since it‚Äôs circular).